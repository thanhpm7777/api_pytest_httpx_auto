# .github/workflows/ci.yml
name: api-tests (Docker + Allure)

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

concurrency:
  group: api-tests-${{ github.ref }}
  cancel-in-progress: true

jobs:
  tests:
    runs-on: ubuntu-latest
    timeout-minutes: 45
    permissions:
      contents: write     # cần để push gh-pages (publish)
      pages: write        # chỉ cần nếu dùng Deploy Pages flow (không dùng ở đây)
      id-token: write     # chỉ cần nếu dùng Deploy Pages flow (không dùng ở đây)

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      # Compose của bạn dùng env_file: .env → tạo từ secrets
      - name: Create .env for compose
        run: |
          {
            echo "BASE_URL=${{ secrets.BASE_URL }}"
            echo "API_USERNAME=${{ secrets.API_USERNAME }}"
            echo "API_PASSWORD=${{ secrets.API_PASSWORD }}"
            echo "API_SCHEMA_URL=${{ secrets.API_SCHEMA_URL }}"
            echo "HOST=${{ secrets.HOST }}"
            echo "LOGIN_PATH=${{ vars.LOGIN_PATH || '/auth/login/' }}"
          } > .env

      - name: Build test image (compose)
        run: docker compose build tests

      # PR = smoke; main/dispatch = full
      - name: Decide markers
        id: plan
        shell: bash
        run: |
          if [[ "${{ github.event_name }}" == "pull_request" ]]; then
            echo "MARKS=-m smoke" >> "$GITHUB_OUTPUT"
          else
            echo "MARKS=" >> "$GITHUB_OUTPUT"
          fi

      - name: Run tests in Docker (pytest → Allure results)
        run: |
          docker compose run --rm tests \
            pytest ${{ steps.plan.outputs.MARKS }} -n auto \
              --alluredir=/app/reports/allure-results

      - name: Fix permissions for artifacts
        if: always()
        run: sudo chown -R $USER:$USER reports || true

      - name: Upload Allure results (raw)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: allure-results
          path: reports/allure-results

      # ==== Allure HTML (miễn phí) ====
      # 1) (Không bắt buộc) Tải history nếu NHÁNH TỒN TẠI – không fail nếu chưa có
      - name: Try load gh-pages (history) if exists
        if: always()
        shell: bash
        run: |
          if git ls-remote --exit-code --heads origin gh-pages >/dev/null 2>&1; then
            echo "gh-pages exists; checkout for history"
            git fetch origin gh-pages:gh-pages --depth=1
            mkdir -p gh-pages
            git -C gh-pages init
            git -C gh-pages checkout -B gh-pages
            git -C gh-pages pull --depth 1 origin gh-pages || true
          else
            echo "gh-pages NOT found; will create later"
          fi

      # 2) Build Allure HTML (không yêu cầu container Allure)
      - name: Build Allure HTML
        if: always()
        uses: simple-elf/allure-report-action@v1.13
        with:
          allure_results: reports/allure-results
          gh_pages: gh-pages        # nếu thư mục gh-pages không có, action vẫn build được
          allure_report: allure-report
          allure_history: allure-history

      - name: Upload Allure HTML
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: allure-report
          path: allure-report

      # 3) Publish lên gh-pages – ép tạo nhánh nếu chưa tồn tại
      - name: Publish to GitHub Pages (create/force orphan if needed)
        if: always()
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_branch: gh-pages
          publish_dir: allure-history
          user_name: github-actions[bot]
          user_email: 41898282+github-actions[bot]@users.noreply.github.com
          keep_files: true
          force_orphan: true         # tạo nhánh nếu chưa có, tránh lỗi git exit 1
          allow_empty_commit: true
